#!/usr/bin/env python

""" TWILA stands for 'That's What I'd Log/Answer'. It gives short morse sentences and asks for the important info. """

import logging
import random
import subprocess
import readline
import time
import datetime
import argparse
import os.path
import os
import configparser
import traceback

__author__ = "Francois Wisard (HB9FXW)"
__version__ = "1.2.0"



try:
    config=configparser.ConfigParser()
    config.read(['odobenixrc','/etc/odobenixrc',os.path.expanduser('~/.config/odobenix/odobenixrc'),os.path.expanduser('~/.odobenixrc')])
    conf=config['DEFAULT']
    keybspeed=conf.getfloat('keybspeed')
    freq=conf.getint('freq')
    speed=conf.getint('speed')
    myname=config['Twila']['myname']
    myrig=config['Twila']['myrig']
    mycall=config['Twila']['mycall']
    myage=config['Twila'].getint('myage')
    CW=conf['CWbin']
except Exception:
    print("\nError reading the configuration file:\n")
    traceback.print_exc()
    exit(2)
    
qth=['paris','berlin','london','glasgow','dublin','riga','moscow','bern','geneva','lyon','bonn','madrid','porto','lisbon','antwerp','athens','barcelona','birmingham','bremen','belgrade','bristol','brussels','bucharest','budapest','cardiff','copenhagen','donetsk','frankfurt','the hague','hamburg','helsinki','istanbul','kazan','kharkiv','kyiv','krakow','leeds','bradford', 'lille','tournai','liverpool','lodz','manchester','marseille','milan','minsk','munich','naples','nice','nottingham','nizhniy novgorod','nuremberg','odesa','oslo','perm','portsmouth','southampton','prague','cologne','rome','rotterdam','saint petersburg','samara','saratov','seville','sofia','stockholm','sheffield','stuttgart','thessaloniki','turin','newcastle','ufa','valencia','vienna','volgograd','warsaw','zagreb','zurich']

names=['leo','ben','jim','mike','jon','john','luke','mark','markus','mat','henry','erik','eric','james','bob','bill','will','kurt','heinrich','hugo','luigi','mario','klaus','aron','gunnar','olaf','jack','daniel','dan','luca','tom','noah', 'emil','david','dave','mirko','andrei','sergey','valery','alex','liam','oskar','emir','berat','georges','paul','angus','oliver','jack','omer','leon','mihai','andrea','matteo','peter','finn','anton','kevin','tarik','frank','victor','mohammed','max','rayan','ivan','ali','luis','samuel','ralf','said','juan','jose','diego','neil','ethan','eric','seb','joe','jo','peng','tao','cheng','wei','muhamad','fahd','art','giorgi','hans','malik']

rigs=['ic7000','ic 7200','ts 450','ft 450d','ft 991','ft dx1200','ft 897d','ft 1e','homebrew','ts 590s','ts 2000','ic 7851','ic 9100','ts 480','ft 817nd','pixie 2','kx3','k2','k1','tuna tin 2','argonaut v','ic 706mk2']

# ant=['dipole','3el','quad','ef']

# Configuration ends here #####################################################

def hiscall():
    filename="prefixes"
    fileh = open(filename,'r')

    #Get the total file size
    file_size = os.stat(filename)[6]

    while 1:
          #Seek to a place in the file which is a random distance away
          #Mod by file size so that it wraps around to the beginning
          fileh.seek((fileh.tell()+random.randint(0,file_size-1))%file_size)

          #dont use the first readline since it may fall in the middle of a line
          fileh.readline()
          #this will return the next (complete) line from the file
          line = fileh.readline()
          line= line.rstrip()
          line=line.casefold()
          #here is your random line in the file
          logging.debug('line: %s',line)


          nbchars=random.choice([1,2,2,3,3,3,3,3,3,3])
          suffix=''
          for i in range(0,nbchars):
              suffix+=chr(random.randint(97,122))
          logging.debug('suffix: %s',suffix)
          return line+suffix+' '+line+suffix

myname=myname.casefold()
myrig=myrig.casefold()
mycall=mycall.casefold()

x = 1
count = 0
score =0
cat='' #category. 
speedvariation=0

parser=argparse.ArgumentParser(description='Trains your CW skills by giving you short sentences and waiting for an answer or a log entry with the most important info.\n\nExamples:\n- It says "name hr is bob", you should enter "bob"\n- It asks "pse rpt age", you should answer with your age.\n- It says "ant is mag loop on the roof", you should enter "mag loop".',epilog='Version '+__version__+' by '+__author__)
parser.add_argument('-d',help='debug mode',action='store_true')
parser.add_argument('-f',help='frequency (300-1400) (default: %(default)s)',default=freq,type=int,metavar='FREQ')
parser.add_argument('-x',help='enable strict mode',action='store_true')
parser.add_argument('-a',help='ask questions too',action='store_true')
parser.add_argument('-s',help='speed in wpm (5-100) (default: %(default)s)',default=speed,type=int,metavar='SPEED')
parser.add_argument('-c',help='focus on only one category (rst,name,age)',type=str,metavar='CAT')
parser.add_argument('-r',help='reveal what was sent',action='store_true')
parser.add_argument('-v',help='vary the frequency and the speed',action='store_true')
args=parser.parse_args()

if args.d: 
    logging.basicConfig(level=logging.DEBUG)
    #logging.basicConfig(filename='debug.log',level=logging.DEBUG)

if (args.f > 300) and (args.f<1401): 
    freq=args.f
if args.c:
    args.x=True
if (args.s > 5) and (args.s < 101): 
    speed=args.s

if not os.path.isfile(CW):
    print("Unable to find the morse generator ({}). Check your install.".format(CW))
    exit(10)

print("Answer, or log the most important info given (or just the category if you didn't enable strict mode).\
        \n\nCategories are: name, rst, rig, age, qth, call. \n\nType 'q' to quit.\n\n")

while x == 1 :
    logging.debug('-----')

    alea=random.randint(1,5)
    if args.a:
        alea=random.randint(1,8) # more choices since we ask questions too
    if args.c=='rst':
        alea=2 #not really random anymore ikr
    if args.c=='name':
        alea=1
    if args.c=='age':
        alea=3
    if args.c=='call':
        alea=6

    om=random.choice(['my friend','dr om','dr '+myname,myname,'om',''])

    if alea==1: #name
        cpuinfo=random.choice(names)
        if random.random()>0.3: # doubling the name is common
            cpuinfo+=' '+cpuinfo
        qso=random.choice(['op hr '+cpuinfo,'name hr is '+cpuinfo,'op '+cpuinfo,'my name is '+cpuinfo,'name is '+cpuinfo,'name '+cpuinfo])
        cat='name'

    elif alea==2: #rst
        if random.random()>0.5: # 599 is unfortunately very common
            cpuinfo=random.choice(['5nn','5nn 5nn','599 599','599 5nn'])
        elif random.random()>0.5: # these should be common too
            cpuinfo=random.choice(['579','559','539'])
            cpuinfo+=' '+cpuinfo #doubling
        else:
            cpuinfo=random.choice(['4','5'])+str(random.randint(1,9))+str(random.randint(1,9))
            cpuinfo+=' '+cpuinfo #doubling
        qso=random.choice(['ur rst is '+cpuinfo,'ur '+cpuinfo,'rprt is '+cpuinfo,'rst '+cpuinfo])
        cat='rst'

    elif alea==3: #age
        cpuinfo=str(random.randint(10,110))
        qso=random.choice(['age hr '+cpuinfo,'I am '+cpuinfo+' years old','my age is '+cpuinfo+' '+cpuinfo,'age '+cpuinfo+' '+cpuinfo])
        cat='age'

    elif alea==4: #qth
        cpuinfo=random.choice(qth)
        if random.random()>0.7:
            cpuinfo='nr '+cpuinfo
        if random.random()>0.7:
            cpuinfo+=' '+cpuinfo #doubling
        qso=random.choice(['qth '+cpuinfo, 'my qth is '+cpuinfo, 'qth is '+cpuinfo, 'my qth '+cpuinfo])
        cat='qth'

    elif alea==5: #rig
        cpuinfo=random.choice(rigs)
        qso=random.choice(['rig hr is '+cpuinfo, 'rig is '+ cpuinfo, 'tx is '+cpuinfo, 'my rig is a '+cpuinfo, 'trx is '+cpuinfo])
        cat='rig'
    elif alea==6: #call
        cpuinfo=hiscall()
        cat='call'
        qso=random.choice(['de '+cpuinfo,mycall+' de '+cpuinfo, cpuinfo])
        if random.random()>0.3:
            qso+=' k'
        else:
            qso+=' +'
    # elif alea==6: #ant
    #     cpuinfo=random.choice(ant)
    #     qso=random.choice(['ant is '+cpuinfo, 'ant hr '+cpuinfo, 'ant hr is '+cpuinfo, '1tt w in '+cpuinfo,cpuinfo+' at '+random.randint(3,30)+'m agl','ant '+cpuinfo+' at '+random.randint(2,30)+'m abv roof'])
    #     cat='ant'
    elif alea==7: #ask name
        cpuinfo=myname
        cat='my name'
        qso=random.choice(['pse rpt ur name','name agn?','ur name pse','ur name?','pse name agn?'])
    elif alea==8: #ask age
        cpuinfo=myage
        cat='my age'
        qso=random.choice(['pse rpt ur age','ur age agn?','hw old r u?','hw old agn?','ur age pse'])
    elif alea==9: #ask rig
        cpuinfo=myrig
        cat='my rig'
        qso=random.choice(['ur rig agn?','pse rpt rig','rpt rig pse','rig?'])


    else :
        logging.debug('oops, not enough categories')


    if cat != 'call': 
        qso='= '+qso
        if random.random()>0.7: #fluff at the beginning 
            fluff=random.choice(['rr '+om+'= ','all ok = ','ok '+om+' ','fb on ur info = ','fb cpi '+om+' ','tu '])
            qso=fluff+qso
        elif random.random()>0.8: #fluff at the end
            fluff=random.choice([' hi hi',' qsl?', ' bk', ' btu '+om, ' = qru', ' = hw?',' +'])
            qso+=fluff
    logging.debug('qso: %s',qso)


    if args.v:
# vary speed by 10% up max, 20% down max
        if random.random()>0.5:
            speedvariation=random.randint(-2*int(speed/10),int(speed/10))
        elif random.random()<0.2:  #1 in 10
            speedvariation=1
        else:
            speedvariation=0
        subprocess.run([CW,qso, str(speed+speedvariation), str(freq+random.randint(-100,200))])
    else:
        subprocess.run([CW,qso,  str(speed), str(freq)])
    
    cmd=input('>? ')
    cmd=cmd.casefold()
    logging.debug("Info: %s entered: %s.",cpuinfo,cmd)

    if (cmd == 'q') or (cmd=='quit') or (cmd=='exit'):
        subprocess.run([CW,'TU 73',str(speed+5),'380'])
        print("Correct answers: {}/{}".format(score,count))
        exit(0)
    try:
        if cpuinfo.split(' ')[0] == cpuinfo.split(' ')[1] : #info has been doubled, take only one
            cpuinfo=cpuinfo.split(' ')[0]
        elif cpuinfo.split(' ')[0] == 'nr': #qth with a 'nr' had beed doubled.
            cpuinfo=cpuinfo.split(' ')[1] 
            if cmd.split(' ')[0] == 'nr':
                cmd=cmd.split(' ')[1] #get rid of the 'nr' in qth logs
    except:
        pass
    if "5nn" in cpuinfo and cmd== "599": #accept 599 instead of 5nn
        cpuinfo = "599"

    if cmd == cpuinfo or (cmd == cat and not  args.x):
        subprocess.run([CW,'c',  str(speed), str(freq)])
        print("    Correct.")
        score += 1
    else:
        subprocess.run([CW,'?',  str(speed), str(freq)])
        print("Wrong, it was {} ({}).".format(cpuinfo, cat))
    count += 1
    if args.r:
        print("({}, at {}wpm)".format(qso,str(speed+speedvariation)))

